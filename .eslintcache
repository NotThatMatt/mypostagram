[{"/Users/mattjul/sandbox/postagram/src/aws-exports.js":"1","/Users/mattjul/sandbox/postagram/src/App.js":"2","/Users/mattjul/sandbox/postagram/src/Button.js":"3","/Users/mattjul/sandbox/postagram/src/graphql/mutations.js":"4","/Users/mattjul/sandbox/postagram/src/CreatePost.js":"5","/Users/mattjul/sandbox/postagram/src/Posts.js":"6","/Users/mattjul/sandbox/postagram/src/Post.js":"7","/Users/mattjul/sandbox/postagram/src/Header.js":"8","/Users/mattjul/sandbox/postagram/src/graphql/queries.js":"9","/Users/mattjul/sandbox/postagram/src/index.js":"10"},{"size":873,"mtime":1609900747534,"results":"11","hashOfConfig":"12"},{"size":2325,"mtime":1609902098743,"results":"13","hashOfConfig":"12"},{"size":541,"mtime":1609902162970,"results":"14","hashOfConfig":"12"},{"size":997,"mtime":1609899320243,"results":"15","hashOfConfig":"12"},{"size":3701,"mtime":1609985113826,"results":"16","hashOfConfig":"12"},{"size":914,"mtime":1609902123966,"results":"17","hashOfConfig":"12"},{"size":1339,"mtime":1609902145713,"results":"18","hashOfConfig":"12"},{"size":575,"mtime":1609902155522,"results":"19","hashOfConfig":"12"},{"size":654,"mtime":1609899320176,"results":"20","hashOfConfig":"12"},{"size":595,"mtime":1609899606238,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"y4kvv8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mattjul/sandbox/postagram/src/aws-exports.js",[],["47","48"],"/Users/mattjul/sandbox/postagram/src/App.js",["49","50"],"import React, { useState, useEffect } from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { css } from '@emotion/css'\nimport { API, Storage, Auth } from 'aws-amplify';\nimport { listPosts } from './graphql/queries';\n\nimport Posts from './Posts';\nimport Post from './Post';\nimport Header from './Header';\nimport CreatePost from './CreatePost';\nimport Button from './Button';\n\nfunction Router() {\n  /* create a couple of pieces of initial state */\n  const [showOverlay, updateOverlayVisibility] = useState(false);\n  const [posts, updatePosts] = useState([]);\n\n  /* fetch posts when component loads */\n  useEffect(() => {\n      fetchPosts();\n  }, []);\n  async function fetchPosts() {\n    /* query the API, ask for 100 items */\n    let postData = await API.graphql({ query: listPosts, variables: { limit: 100 }});\n    let postsArray = postData.data.listPosts.items;\n    /* map over the image keys in the posts array, get signed image URLs for each image */\n    postsArray = await Promise.all(postsArray.map(async post => {\n      const imageKey = await Storage.get(post.image);\n      post.image = imageKey;\n      return post;\n    }));\n    /* update the posts array in the local state */\n    setPostState(postsArray);\n  }\n  async function setPostState(postsArray) {\n    updatePosts(postsArray);\n  }\n  return (\n    <>\n      <HashRouter>\n          <div className={contentStyle}>\n            <Header />\n            <hr className={dividerStyle} />\n            <Button title=\"New Post\" onClick={() => updateOverlayVisibility(true)} />\n            <Switch>\n              <Route exact path=\"/\" >\n                <Posts posts={posts} />\n              </Route>\n              <Route path=\"/post/:id\" >\n                <Post />\n              </Route>\n            </Switch>\n          </div>\n          <AmplifySignOut />\n        </HashRouter>\n        { showOverlay && (\n          <CreatePost\n            updateOverlayVisibility={updateOverlayVisibility}\n            updatePosts={setPostState}\n            posts={posts}\n          />\n        )}\n    </>\n  );\n}\n\nconst dividerStyle = css`\n  margin-top: 15px;\n`\n\nconst contentStyle = css`\n  min-height: calc(100vh - 45px);\n  padding: 0px 40px;\n`\n\nexport default withAuthenticator(Router);",["51","52"],"/Users/mattjul/sandbox/postagram/src/Button.js",[],["53","54"],"/Users/mattjul/sandbox/postagram/src/graphql/mutations.js",[],"/Users/mattjul/sandbox/postagram/src/CreatePost.js",[],"/Users/mattjul/sandbox/postagram/src/Posts.js",[],"/Users/mattjul/sandbox/postagram/src/Post.js",["55"],"import React, { useState, useEffect } from 'react'\nimport { css } from '@emotion/css'\nimport { useParams } from 'react-router-dom';\nimport { API, Storage } from 'aws-amplify';\nimport { getPost } from './graphql/queries';\n\nexport default function Post() {\n  const [loading, updateLoading] = useState(true);\n  const [post, updatePost] = useState(null);\n  const { id } = useParams()\n  useEffect(() => {\n    fetchPost()\n  }, [])\n  async function fetchPost() {\n    try {\n      const postData = await API.graphql({\n        query: getPost, variables: { id }\n      });\n      const currentPost = postData.data.getPost\n      const image = await Storage.get(currentPost.image);\n\n      currentPost.image = image;\n      updatePost(currentPost);\n      updateLoading(false);\n    } catch (err) {\n      console.log('error: ', err)\n    }\n  }\n  if (loading) return <h3>Loading...</h3>\n  console.log('post: ', post)\n  return (\n    <>\n      <h1 className={titleStyle}>{post.name}</h1>\n      <h3 className={locationStyle}>{post.location}</h3>\n      <p>{post.description}</p>\n      <img alt=\"post\" src={post.image} className={imageStyle} />\n    </>\n  )\n}\n\nconst titleStyle = css`\n  margin-bottom: 7px;\n`\n\nconst locationStyle = css`\n  color: #0070f3;\n  margin: 0;\n`\n\nconst imageStyle = css`\n  max-width: 500px;\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`","/Users/mattjul/sandbox/postagram/src/Header.js",[],"/Users/mattjul/sandbox/postagram/src/graphql/queries.js",[],"/Users/mattjul/sandbox/postagram/src/index.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":9,"column":24,"nodeType":"62","messageId":"63","endLine":9,"endColumn":28},{"ruleId":"64","severity":1,"message":"65","line":26,"column":6,"nodeType":"66","endLine":26,"endColumn":8,"suggestions":"67"},{"ruleId":"56","replacedBy":"68"},{"ruleId":"58","replacedBy":"69"},{"ruleId":"56","replacedBy":"70"},{"ruleId":"58","replacedBy":"71"},{"ruleId":"64","severity":1,"message":"72","line":13,"column":6,"nodeType":"66","endLine":13,"endColumn":8,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["76"],["74"],["75"],["74"],["75"],"React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.",["77"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [fetchPosts]",{"range":"82","text":"83"},"Update the dependencies array to be: [fetchPost]",{"range":"84","text":"85"},[755,757],"[fetchPosts]",[421,423],"[fetchPost]"]