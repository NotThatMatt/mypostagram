[{"/Users/mattjul/sandbox/postagram/src/aws-exports.js":"1","/Users/mattjul/sandbox/postagram/src/App.js":"2","/Users/mattjul/sandbox/postagram/src/Button.js":"3","/Users/mattjul/sandbox/postagram/src/graphql/mutations.js":"4","/Users/mattjul/sandbox/postagram/src/CreatePost.js":"5","/Users/mattjul/sandbox/postagram/src/Posts.js":"6","/Users/mattjul/sandbox/postagram/src/Post.js":"7","/Users/mattjul/sandbox/postagram/src/Header.js":"8","/Users/mattjul/sandbox/postagram/src/graphql/queries.js":"9"},{"size":873,"mtime":1609900747534,"results":"10","hashOfConfig":"11"},{"size":2325,"mtime":1609902098743,"results":"12","hashOfConfig":"11"},{"size":541,"mtime":1609902162970,"results":"13","hashOfConfig":"11"},{"size":997,"mtime":1609899320243,"results":"14","hashOfConfig":"11"},{"size":3577,"mtime":1609902139120,"results":"15","hashOfConfig":"11"},{"size":914,"mtime":1609902123966,"results":"16","hashOfConfig":"11"},{"size":1339,"mtime":1609902145713,"results":"17","hashOfConfig":"11"},{"size":575,"mtime":1609902155522,"results":"18","hashOfConfig":"11"},{"size":654,"mtime":1609899320176,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"y4kvv8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mattjul/sandbox/postagram/src/aws-exports.js",[],["43","44"],"/Users/mattjul/sandbox/postagram/src/App.js",["45","46"],"import React, { useState, useEffect } from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { css } from '@emotion/css'\nimport { API, Storage, Auth } from 'aws-amplify';\nimport { listPosts } from './graphql/queries';\n\nimport Posts from './Posts';\nimport Post from './Post';\nimport Header from './Header';\nimport CreatePost from './CreatePost';\nimport Button from './Button';\n\nfunction Router() {\n  /* create a couple of pieces of initial state */\n  const [showOverlay, updateOverlayVisibility] = useState(false);\n  const [posts, updatePosts] = useState([]);\n\n  /* fetch posts when component loads */\n  useEffect(() => {\n      fetchPosts();\n  }, []);\n  async function fetchPosts() {\n    /* query the API, ask for 100 items */\n    let postData = await API.graphql({ query: listPosts, variables: { limit: 100 }});\n    let postsArray = postData.data.listPosts.items;\n    /* map over the image keys in the posts array, get signed image URLs for each image */\n    postsArray = await Promise.all(postsArray.map(async post => {\n      const imageKey = await Storage.get(post.image);\n      post.image = imageKey;\n      return post;\n    }));\n    /* update the posts array in the local state */\n    setPostState(postsArray);\n  }\n  async function setPostState(postsArray) {\n    updatePosts(postsArray);\n  }\n  return (\n    <>\n      <HashRouter>\n          <div className={contentStyle}>\n            <Header />\n            <hr className={dividerStyle} />\n            <Button title=\"New Post\" onClick={() => updateOverlayVisibility(true)} />\n            <Switch>\n              <Route exact path=\"/\" >\n                <Posts posts={posts} />\n              </Route>\n              <Route path=\"/post/:id\" >\n                <Post />\n              </Route>\n            </Switch>\n          </div>\n          <AmplifySignOut />\n        </HashRouter>\n        { showOverlay && (\n          <CreatePost\n            updateOverlayVisibility={updateOverlayVisibility}\n            updatePosts={setPostState}\n            posts={posts}\n          />\n        )}\n    </>\n  );\n}\n\nconst dividerStyle = css`\n  margin-top: 15px;\n`\n\nconst contentStyle = css`\n  min-height: calc(100vh - 45px);\n  padding: 0px 40px;\n`\n\nexport default withAuthenticator(Router);",["47","48"],"/Users/mattjul/sandbox/postagram/src/Button.js",[],"/Users/mattjul/sandbox/postagram/src/graphql/mutations.js",[],"/Users/mattjul/sandbox/postagram/src/CreatePost.js",["49"],"import React, { useState } from 'react';\nimport { css } from '@emotion/css'\nimport Button from './Button';\nimport { v4 as uuid } from 'uuid';\nimport { Storage, API, Auth } from 'aws-amplify';\nimport { createPost } from './graphql/mutations';\n\n/* Initial state to hold form input, saving state */\nconst initialState = {\n  name: '',\n  description: '',\n  image: {},\n  file: '',\n  location: '',\n  saving: false\n};\n\nexport default function CreatePost({\n  updateOverlayVisibility, updatePosts, posts\n}) {\n  /* 1. Create local state with useState hook */\n  const [formState, updateFormState] = useState(initialState)\n\n  /* 2. onChangeText handler updates the form state when a user types into a form field */\n  function onChangeText(e) {\n    e.persist();\n    updateFormState(currentState => ({ ...currentState, [e.target.name]: e.target.value }));\n  }\n\n  /* 3. onChangeFile handler will be fired when a user uploads a file  */\n  function onChangeFile(e) {\n    e.persist();\n    if (! e.target.files[0]) return;\n    const image = { fileInfo: e.target.files[0], name: `${e.target.files[0].name}_${uuid()}`}\n    updateFormState(currentState => ({ ...currentState, file: URL.createObjectURL(e.target.files[0]), image }))\n  }\n\n  /* 4. Save the post  */\n  async function save() {\n    try {\n      const { name, description, location, image } = formState;\n      if (!name || !description || !location || !image.name) return;\n      updateFormState(currentState => ({ ...currentState, saving: true }));\n      const postId = uuid();\n      const postInfo = { name, description, location, image: formState.image.name, id: postId };\n\n      await Storage.put(formState.image.name, formState.image.fileInfo);\n      await API.graphql({\n        query: createPost, variables: { input: postInfo }\n      });\n      updatePosts([...posts, { ...postInfo, image: formState.file }]);\n      updateFormState(currentState => ({ ...currentState, saving: false }));\n      updateOverlayVisibility(false);\n    } catch (err) {\n      console.log('error: ', err);\n    }\n  }\n\n  return (\n    <div className={containerStyle}>\n      <input\n        placeholder=\"Post name\"\n        name=\"name\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input\n        placeholder=\"Location\"\n        name=\"location\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input\n        placeholder=\"Description\"\n        name=\"description\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input \n        type=\"file\"\n        onChange={onChangeFile}\n      />\n      { formState.file && <img className={imageStyle} alt=\"preview\" src={formState.file} /> }\n      <Button title=\"Create New Post\" onClick={save} />\n      <Button type=\"cancel\" title=\"Cancel\" onClick={() => updateOverlayVisibility(false)} />\n      { formState.saving && <p className={savingMessageStyle}>Saving post...</p> }\n    </div>\n  )\n}\n\nconst inputStyle = css`\n  margin-bottom: 10px;\n  outline: none;\n  padding: 7px;\n  border: 1px solid #ddd;\n  font-size: 16px;\n  border-radius: 4px;\n`\n\nconst imageStyle = css`\n  height: 120px;\n  margin: 10px 0px;\n  object-fit: contain;\n`\n\nconst containerStyle = css`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  height: 420px;\n  position: fixed;\n  left: 0;\n  border-radius: 4px;\n  top: 0;\n  margin-left: calc(50vw - 220px);\n  margin-top: calc(50vh - 230px);\n  background-color: white;\n  border: 1px solid #ddd;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 0.125rem 0.25rem;\n  padding: 20px;\n`\n\nconst savingMessageStyle = css`\n  margin-bottom: 0px;\n`","/Users/mattjul/sandbox/postagram/src/Posts.js",[],"/Users/mattjul/sandbox/postagram/src/Post.js",["50"],"import React, { useState, useEffect } from 'react'\nimport { css } from '@emotion/css'\nimport { useParams } from 'react-router-dom';\nimport { API, Storage } from 'aws-amplify';\nimport { getPost } from './graphql/queries';\n\nexport default function Post() {\n  const [loading, updateLoading] = useState(true);\n  const [post, updatePost] = useState(null);\n  const { id } = useParams()\n  useEffect(() => {\n    fetchPost()\n  }, [])\n  async function fetchPost() {\n    try {\n      const postData = await API.graphql({\n        query: getPost, variables: { id }\n      });\n      const currentPost = postData.data.getPost\n      const image = await Storage.get(currentPost.image);\n\n      currentPost.image = image;\n      updatePost(currentPost);\n      updateLoading(false);\n    } catch (err) {\n      console.log('error: ', err)\n    }\n  }\n  if (loading) return <h3>Loading...</h3>\n  console.log('post: ', post)\n  return (\n    <>\n      <h1 className={titleStyle}>{post.name}</h1>\n      <h3 className={locationStyle}>{post.location}</h3>\n      <p>{post.description}</p>\n      <img alt=\"post\" src={post.image} className={imageStyle} />\n    </>\n  )\n}\n\nconst titleStyle = css`\n  margin-bottom: 7px;\n`\n\nconst locationStyle = css`\n  color: #0070f3;\n  margin: 0;\n`\n\nconst imageStyle = css`\n  max-width: 500px;\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`","/Users/mattjul/sandbox/postagram/src/Header.js",[],"/Users/mattjul/sandbox/postagram/src/graphql/queries.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":9,"column":24,"nodeType":"57","messageId":"58","endLine":9,"endColumn":28},{"ruleId":"59","severity":1,"message":"60","line":26,"column":6,"nodeType":"61","endLine":26,"endColumn":8,"suggestions":"62"},{"ruleId":"51","replacedBy":"63"},{"ruleId":"53","replacedBy":"64"},{"ruleId":"55","severity":1,"message":"56","line":5,"column":24,"nodeType":"57","messageId":"58","endLine":5,"endColumn":28},{"ruleId":"59","severity":1,"message":"65","line":13,"column":6,"nodeType":"61","endLine":13,"endColumn":8,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["69"],["67"],["68"],"React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [fetchPosts]",{"range":"75","text":"76"},"Update the dependencies array to be: [fetchPost]",{"range":"77","text":"78"},[755,757],"[fetchPosts]",[421,423],"[fetchPost]"]